for (i in 1:5) {
# solve ODE with parameters from posterior sample i
sol <- as.data.frame(lsoda(y = samples_together[i, c('N1_0', 'N2_0')],
times = seq(0,20, by = 0.1),
func = odemodel,
parms = samples_together[i, c('r', 'a', 'e', 'm')]))
# plot the solution on to our base plot
sol_plot_dat <- data.frame(time = rep(seq(0,20, by = 0.1), times = 2),
dens = c(sol$N1_0, sol$N2_0),
species = rep(c('Prey', 'Predator'), each = 201))
base_plot <- base_plot + geom_line(data = sol_plot_dat, aes(x = time, y = dens, color = species), alpha = 0.15)
}
base_plot
for (i in 1:nrow(samples_together)) {
# solve ODE with parameters from posterior sample i
sol <- as.data.frame(lsoda(y = samples_together[i, c('N1_0', 'N2_0')],
times = seq(0,20, by = 0.1),
func = odemodel,
parms = samples_together[i, c('r', 'a', 'e', 'm')]))
# plot the solution on to our base plot
sol_plot_dat <- data.frame(time = rep(seq(0,20, by = 0.1), times = 2),
dens = c(sol$N1_0, sol$N2_0),
species = rep(c('Prey', 'Predator'), each = 201))
base_plot <- base_plot + geom_line(data = sol_plot_dat, aes(x = time, y = dens, color = species), alpha = 0.1)
}
base_plot
base_plot <- ggplot(data = Ns_noise_mod, aes(x = time, y = dens, shape = species)) + geom_point(size = 3) +
scale_shape_manual(values = c(16,21), name = 'Species') + theme_cowplot() + xlab('Time') + ylab('Density') +
ylim(c(0, 200))
for (i in 1:1000) {
# solve ODE with parameters from posterior sample i
sol <- as.data.frame(lsoda(y = samples_together[i, c('N1_0', 'N2_0')],
times = seq(0,20, by = 0.1),
func = odemodel,
parms = samples_together[i, c('r', 'a', 'e', 'm')]))
# plot the solution on to our base plot
sol_plot_dat <- data.frame(time = rep(seq(0,20, by = 0.1), times = 2),
dens = c(sol$N1_0, sol$N2_0),
species = rep(c('Prey', 'Predator'), each = 201))
base_plot <- base_plot + geom_line(data = sol_plot_dat, aes(x = time, y = dens, color = species), alpha = 0.1)
}
base_plot
base_plot <- ggplot(data = Ns_noise_mod, aes(x = time, y = dens, shape = species)) + geom_point(size = 3) +
scale_shape_manual(values = c(16,21), name = 'Species') + theme_cowplot() + xlab('Time') + ylab('Density') +
ylim(c(0, 200))
samples_together <- rbind(samples[[1]], samples[[2]], samples[[3]])
for (i in 1:100) {
# solve ODE with parameters from posterior sample i
sol <- as.data.frame(lsoda(y = samples_together[i, c('N1_0', 'N2_0')],
times = seq(0,20, by = 0.1),
func = odemodel,
parms = samples_together[i, c('r', 'a', 'e', 'm')]))
# plot the solution on to our base plot
sol_plot_dat <- data.frame(time = rep(seq(0,20, by = 0.1), times = 2),
dens = c(sol$N1_0, sol$N2_0),
species = rep(c('Prey', 'Predator'), each = 201))
base_plot <- base_plot + geom_line(data = sol_plot_dat, aes(x = time, y = dens, color = species), alpha = 0.1)
}
base_plot
save.image("~/ODE_Example.RData")
ggplot(data = Ns_mod, aes(x = time, y = dens, color = species)) + geom_line() +
theme_cowplot()
plot(x = Ns_noise$time, y = Ns_noise$Prey, ylim = c(0, 225))
points(x = Ns_noise$time, y = Ns_noise$Predator, pch = 16)
summary(fit)
plot(samples[, c("r")])
plot(samples[, c("a")])
plot(samples[,c("e")])
plot(samples[,c('m')])
base_plot <- ggplot(data = Ns_noise_mod, aes(x = time, y = dens, shape = species)) + geom_point(size = 3) +
scale_shape_manual(values = c(16,21), name = 'Species') + theme_cowplot() + xlab('Time') + ylab('Density') +
ylim(c(0, 200))
base_plot
samples_together <- rbind(samples[[1]], samples[[2]], samples[[3]])
for (i in 1:100) {
# solve ODE with parameters from posterior sample i
sol <- as.data.frame(lsoda(y = samples_together[i, c('N1_0', 'N2_0')],
times = seq(0,20, by = 0.1),
func = odemodel,
parms = samples_together[i, c('r', 'a', 'e', 'm')]))
# plot the solution on to our base plot
sol_plot_dat <- data.frame(time = rep(seq(0,20, by = 0.1), times = 2),
dens = c(sol$N1_0, sol$N2_0),
species = rep(c('Prey', 'Predator'), each = 201))
base_plot <- base_plot + geom_line(data = sol_plot_dat, aes(x = time, y = dens, color = species), alpha = 0.1)
}
base_plot
ggplot(data = Ns_mod, aes(x = time, y = dens, color = species)) + geom_line() +
theme_cowplot()
plot(x = Ns_noise$time, y = Ns_noise$Prey, ylim = c(0, 225))
points(x = Ns_noise$time, y = Ns_noise$Predator, pch = 16)
summary(fit)
plot(samples[, c("r")])
base_plot
stanmodel <-  stan_model(file = '20_32_1_StanModel_VolDep.stan')
0.8/0.0125
0.0125/0.8
0.015^2
load("~/FR_Stability_Imp/Regressions/RegressionResults.RData")
summary(Khat1_Prey50_fit, prob = 0.9)
fixef(Khat1_Prey50_fit)
library(brms)
library(dplyr); library(ggplot2); library(cowplot); library(mgcv); library(gratia); library(lme4)
library(brms)
fixef(Khat1_Prey50_fit)
fixef(Khat1_Prey50_fit, probs = 0.9)
fixef(Khat1_Prey50_fit, probs = 0.9)
fixef(Khat1_Prey50_fit, probs = c(0.05, 0.95)
)
summary(Khat1_Prey50_fit, prob = 0.9)
summary(Khat1_Prey90_fit, prob = 0.9)
fixef(Khat1_Prey90_fit, prob = 0.9)
fixef(Khat1_Prey90_fit, probs = c(0.05, 0.95))
sum(forage_reduced$Khat_3_Prey50)/length(forage_reduced$Khat_3_Prey50)
summary(Khat3_Prey50_fit, prob = 0.9)
sum(forage_reduced$Khat_3_Prey50)/length(forage_reduced$Khat_3_Prey50)
Khat3_Prey50_fit <- brm(formula = Khat_3_Prey50 ~ 0 + 1 +
log(Mass_g) + log(PredMass_g) + Temp_C + I(Temp_C^2) +
as.factor(Dim) + Ecosystem + (1|Pred_Major_Grouping_1) +
(1|Prey_Major_Grouping_1), data = forage_reduced,
family = bernoulli(link = 'logit'), backend = 'cmdstanr', cores = 4)
summary(Khat3_Prey50_fit, prob = 0.9)
summary(Khat3_Prey90_fit, prob = 0.9)
fixef(Khat3_Prey90_fit, probs = c(0.05, 0.95))
summary(Khat21_Prey90_fit, prob = 0.9)
fixef(Khat21_Prey90_fit, probs = c(0.05, 0.95))
summary(Khat3_Prey50_fit, prob = 0.9)
Khat3_Prey50_fit <- brm(formula = Khat_3_Prey50 ~ 0 + 1 +
log(Mass_g) + log(PredMass_g) + Temp_C + I(Temp_C^2) +
as.factor(Dim) + Ecosystem + (1|Pred_Major_Grouping_1) +
(1|Prey_Major_Grouping_1), data = forage_reduced,
family = bernoulli(link = 'logit'), backend = 'cmdstanr', cores = 4)
summary(Khat3_Prey50_fit, prob = 0.9)
summary(Khat3_Prey50_fit_2, prob = 0.9)
0.3*0.3
install.packages('ggbiplot')
library(dplyr); library(ggplot2); library(cowplot); library(brms); library(ggbiplot); library(cmdstanr);
install.packages('ggbiplot')
library(devtools)
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
1/1e-6
1/1.5e-6
set.seed(666)
sample(c('Qingqing', 'Arpita'), size = 2)
set.seed(666)
sample(c('Arpita', 'Qingqing'), size = 2)
sample(c('Dinelka', 'Miyauna', size = 2))
sample(c('Dinelka', 'Miyauna'), size = 2))
sample(c('Dinelka', 'Miyauna'), size = 2)
sample(c('Francis', 'Ryan', 'Cameron'), size = 3)
set.seed(666)
sample(c('Arpita', 'Qingqing'), size = 2)
sample(c('Dinelka', 'Miyauna'), size = 2)
sample(c('Francis', 'Ryan', 'Cameron'), size = 3)
set.seed(666)
sample(c('Arpita', 'Qingqing'), size = 2)
sample(c('Dinelka', 'Miyauna'), size = 2)
sample(c('Francis', 'Ryan', 'Cameron'), size = 3)
0.1/0.9
1/9
1500 * 0.025 * 33.47
1500 * 0.22 * 16.74
5524.2 * 0.9
5524.2 * 0.8
5524.2 * 0.85
4800/1500
1301+1586+1518
4405/3
215/6
5.7+14.2
19.9/2
13000*33.47
13.6+23.8
37.4/2
18700*16.74
435110+313038
77+127.8
204.8/2
748148/102400
300*60*60*24*0.001
600+525
1125/2
(562.5 + 15)/2
288.75*0.2
57.75*16.74
288.75*0.04*33.47
(966.735+386.6)/288.75
400/3
133.33*4.184
mean(c(437,467,471,478,468,463,453))
462*1000
mean(c(56, 67, 72, 83, 74, 68, 72))
70000*33.47
mean(c(80, 85, 85, 86,84,84,82))
84000*16.74
(1406160+2342900)/462000
6.1*4.184
1.2*4.184
2200/454
4.2/4.8
0.875*4.184
1-0.028
0.0028^2
0.028^2
2*0.028*9.72
2*0.028*.972
0.972^2
1/14000
sqrt(7.1e-5)
1-0.008
2*0.992*0.008
1/0.016
-1.5/4
-1.5/0.25
8*5
0.79*0.96
0.87-0.76
3599+52+77+66
20/300
100*0.06/(1 + 100*0.06*0.003 + 30*0.006)
300*0.06/(1 + 300*0.06*0.003 + 90*0.006)
45*0.06/(1 + 45*0.06*0.2 + 7*0.006)
300*0.03/(1 + 300*0.03*0.003 + 90*0.006)
11.3*0.006
800*(40/300)/(1 + 800*(40/300)*0.004 + 150*(4/300))
31.12*(4/300)
40/300
70/300
800/300
0.004*24
install.packages('installr')
require(installr)
updateR()
setwd("~/CopepodForaging")
################################################################################
### Copepod Foraging Analysis
################################################################################
### load packages
library(dplyr); library(ggplot2); library(cowplot); library(brms); library(cmdstanr); library(tidyr);
### load data
feed <- read.csv('Foraging trial data.csv')
phenotype <- read.csv('Paramecium_Phenotype_Data.csv')
copepod <- read.csv('CopepodForagingLengths_Clean.csv')
### first just take a look at the copepod foraging data
# make prey type a factor
feed$Prey.type <- as.factor(feed$Prey.type)
# get rid of observation with dead copepod
feed <- feed %>% filter(Dead == 0)
# create a proportion eaten variable
feed <- feed %>% mutate(Prop.Eaten = 1 - Prey.remaining/Prey.offered)
# change Prey.type to genotype
colnames(feed)[4] <- 'genotype'
# plot of proportion eaten by genotype
ggplot(data = feed, aes(x = genotype, y = Prey.remaining)) + geom_boxplot()
# plot of proportion eaten by copepod ID
ggplot(data = feed, aes(x = Copepod.ID, y = Prey.remaining)) + geom_boxplot()
### can't really tell too much from this
################################################################################
### phenotype data to be matched to foraging data
################################################################################
### perform pca on the means of phenotypes across all of the genotypes
# drop columns of phenotype we don't want
phenotype <- phenotype %>% select(-c(X, mean_grey, sd_grey, sd_area, sd_perimeter,
sd_major, sd_minor, sd_ar, duration, N_frames,
id))
### select the remaining phenotypes that we do want
phenotype <- phenotype %>% select(c(file, mean_major, mean_minor, mean_ar, mean_turning,
sd_turning, gross_speed, sd_gross_speed,
net_disp))
# modify phenotype data to be means
phenotype <- phenotype %>% group_by(file) %>% summarise_all(list(median))
# create a column that is genotype without all of the front stuff
phenotype <- phenotype %>% mutate(genotype = substring(file, first = 11))
# run a pca on the phenotype data
pca_pheno_data <- phenotype %>% select(-c(file, genotype))
pheno_pca <- prcomp(pca_pheno_data, center = TRUE, scale = TRUE)
summary(pheno_pca)
library(ggbiplot)
# pca <- ggbiplot(pheno_pca, labels = phenotype$genotype, groups = phenotype$genotype, scale = 0) +
#   theme_cowplot() + theme(legend.position = 'none')
#
# save_plot(filename = 'pca.png', plot = pca)
### create a prettier pca plot
# make a dataframe for pca
pca_plot_data <- data.frame(pca1 = -pheno_pca$x[,1], pca2 = -pheno_pca$x[,2],
in_foraging = ifelse(phenotype$genotype %in% feed$genotype, 1, 0),
genotype = phenotype$genotype)
ggplot(data = pca_plot_data, aes(x = pca1, y = pca2)) + geom_point()
# want to plot the points as the genotype names and as different colors depending
# on whether they were included in the analysis or not
pca_base <- ggplot(data = pca_plot_data, aes(x = pca1, y = pca2, color = as.factor(in_foraging), shape = as.factor(in_foraging))) +
geom_point(size = 2) + scale_color_manual(values = c('1' = 'magenta', '0' = 'black'),
labels = c('no', 'yes'), name = 'In foraging trial?') +
scale_shape_manual(values = c('1' = 15, '0' = 16), labels = c('no', 'yes'), name = 'In foraging trial?') +
theme_cowplot() +
xlab('PC 1 \n(37.2% explained variance)') + ylab('PC 2 \n(23% explained variance)')
### looks good, but want to add the axis loadings as vectors
# set up what we need using the code for ggbiplot
# ggbiplot
nobs.factor <- sqrt(nrow(pheno_pca$x) - 1)
d <- pheno_pca$sdev
u <- sweep(pheno_pca$x, 2, 1/(d * nobs.factor), FUN = '*')
v <- pheno_pca$rotation
choices <- pmin(1:2, ncol(u))
df.u <- as.data.frame(sweep(u[,choices], 2, d[choices], FUN = '*'))
df.v <- as.data.frame(v[,choices])
names(df.v) <- c('xvar', 'yvar')
names(df.u) <- c('xvar', 'yvar')
df.u <- df.u * nobs.factor
r <- sqrt(qchisq(0.69, df = 2)) * prod(colMeans(df.u^2))^(1/4)
v.scale <- rowSums(v^2)
df.v <- r*df.v/sqrt(max(v.scale))
df.v$varname <- rownames(v)
df.v$angle <- with(df.v, (180/pi) * atan(yvar/xvar))
df.v$hjust <- with(df.v, (0.25 * sign(xvar))/2)
### add vectors representing the variables
### maybe have two plots? One showing just where the genotypes fell
### and another showing the vectors also
df.v$hjust[c(2,4)] <- 1.1
### adjust the locations of the variable names for the pca loadings
df.v$xvar_mod <- 0.8*-df.v$xvar + c(0,0,0,0,0,0,0,0.35)
df.v$yvar_mod <- 0.8*-df.v$yvar + c(0, 0, 0.6, 0, 0, 0, 0.4, -0.45)
df.v$angle_mod <- c(df.v$angle[1:2], 0 , df.v$angle[4:5], 0, 0, 0)
pca_axes_plot <- ggplot(data = pca_plot_data, aes(x = pca1, y = pca2, color = as.factor(in_foraging))) +
geom_point(aes(shape = as.factor(in_foraging)), alpha = 0.1, size = 2) + scale_color_manual(values = c('1' = 'magenta', '0' = 'black'),
labels = c('no', 'yes'), name = 'In foraging trial?') +
scale_shape_manual(values = c('1' = 15, '0' = 16), labels = c('no', 'yes'), name = 'In foraging trial?') +
theme_cowplot() +
geom_segment(data = df.v, aes(x = 0, y = 0, xend = 0.8*-xvar, yend = 0.8*-yvar),
arrow = arrow(length = unit(1/2, 'picas')),
color = muted('red')) +
geom_text(data = df.v, aes(label = varname, x = xvar_mod,
y = yvar_mod, angle = angle_mod, hjust = hjust), inherit.aes = FALSE) +
xlab('PC 1 \n(37.2% explained variance)') + ylab('PC 2 \n(23% explained variance)') + xlim(c(-6,5))
fit <- brm(formula = Prey.eaten | trials(40) ~ 0 + 1 + pca1*pca2 + Length + (1|genotype) + (1|Copepod.ID),
data = feed, family = beta_binomial(link = 'logit', link_phi = 'log'), prior = fit_prior, cores = 4, iter = 1000, warmup = 2000,
backend = 'cmdstanr')
phenotype <- phenotype %>% mutate(pca1 = -pheno_pca$x[,1], pca2 = -pheno_pca$x[,2])
phenotype_pca_merge <- phenotype %>% select(genotype, pca1, pca2)
feed <- left_join(feed, select(phenotype, c(pca1, pca2, genotype)), by = 'genotype')
feed$Prey.eaten <- feed$Prey.offered - feed$Prey.remaining
feed <- left_join(feed, copepod, by = 'Copepod.ID')
feed <- feed %>% select(-X)
copepod_size_plot <- ggplot(data = copepod, aes(x = Length, y = Width)) + geom_point() +
theme_cowplot()
library(dplyr); library(ggplot2); library(cowplot); library(brms); library(cmdstanr); library(tidyr);
feed <- read.csv('Foraging trial data.csv')
phenotype <- read.csv('Paramecium_Phenotype_Data.csv')
copepod <- read.csv('CopepodForagingLengths_Clean.csv')
feed$Prey.type <- as.factor(feed$Prey.type)
feed <- feed %>% filter(Dead == 0)
feed <- feed %>% mutate(Prop.Eaten = 1 - Prey.remaining/Prey.offered)
colnames(feed)[4] <- 'genotype'
ggplot(data = feed, aes(x = genotype, y = Prey.remaining)) + geom_boxplot()
phenotype <- phenotype %>% select(-c(X, mean_grey, sd_grey, sd_area, sd_perimeter,
sd_major, sd_minor, sd_ar, duration, N_frames,
id))
phenotype <- phenotype %>% select(c(file, mean_major, mean_minor, mean_ar, mean_turning,
sd_turning, gross_speed, sd_gross_speed,
net_disp))
phenotype <- phenotype %>% group_by(file) %>% summarise_all(list(median))
phenotype <- phenotype %>% mutate(genotype = substring(file, first = 11))
pca_pheno_data <- phenotype %>% select(-c(file, genotype))
pheno_pca <- prcomp(pca_pheno_data, center = TRUE, scale = TRUE)
summary(pheno_pca)
library(ggbiplot)
phenotype <- phenotype %>% mutate(pca1 = -pheno_pca$x[,1], pca2 = -pheno_pca$x[,2])
phenotype_pca_merge <- phenotype %>% select(genotype, pca1, pca2)
feed <- left_join(feed, select(phenotype, c(pca1, pca2, genotype)), by = 'genotype')
feed$Prey.eaten <- feed$Prey.offered - feed$Prey.remaining
feed <- left_join(feed, copepod, by = 'Copepod.ID')
feed <- feed %>% select(-X)
copepod_size_plot <- ggplot(data = copepod, aes(x = Length, y = Width)) + geom_point() +
theme_cowplot()
cor.test(x = copepod$Length, y = copepod$Width)
save_plot(filename = 'copepod_size_plot.png', plot = copepod_size_plot)
feed <- feed %>% mutate(LengthWidth = Length/Width)
fit_prior <- c(prior(cauchy(0, 2), class = 'b'),
prior(cauchy(0, 2), class = 'Intercept'),
prior(cauchy(0, 2), class = 'sd'))
fit <- brm(formula = Prey.eaten | trials(40) ~ 0 + 1 + pca1*pca2 + Length + (1|genotype) + (1|Copepod.ID),
data = feed, family = beta_binomial(link = 'logit', link_phi = 'log'), prior = fit_prior, cores = 4, iter = 1000, warmup = 2000,
backend = 'cmdstanr')
feed$Prey.eaten
feed$pca1
feed$pca2
feed$Length
feed$genotype
feed$Copepod.ID
fit <- brm(formula = Prey.eaten | trials(40) ~ 0 + 1 + pca1*pca2 + Length + (1|genotype) + (1|Copepod.ID),
data = feed, family = beta_binomial(link = 'logit', link_phi = 'log'), prior = fit_prior, cores = 4, iter = 1000, warmup = 2000,
backend = 'cmdstanr')
fit <- brm(formula = Prey.eaten | trials(40) ~ 0 + 1 + pca1*pca2 + Length + (1|genotype) + (1|Copepod.ID),
data = feed, family = beta_binomial(link = 'logit', link_phi = 'log'), prior = fit_prior, cores = 4, iter = 3000, warmup = 2000,
backend = 'cmdstanr')
rm(list = ls())
setwd("~/ParmeciumPhenotypeGrowth")
library(ggplot2); library(dplyr); library(cowplot); library(ggcorrplot); library(ggbiplot); library(mgcv); library(gratia)
ind_data <- read.csv('Plast_StartPop_Data.csv')
pca_data <- ind_data %>% select(-c(X, mean_grey, sd_grey, sd_area,
sd_perimeter, sd_major, sd_minor,
sd_ar, duration, N_frames, id))
pca_mvt <- prcomp(pca_data[,-1], center = TRUE, scale = TRUE)
pca_ind_plot <- ggbiplot(pca_mvt, groups = pca_data$file, ellipse = TRUE) + theme(legend.position = 'none')
pca_ind_plot
mean_pca_data <- pca_data %>% group_by(file) %>% summarize_all(.funs = mean)
mean_pca <- prcomp(mean_pca_data[,-1], center = TRUE, scale = TRUE)
pca_mean_plot <- ggbiplot(mean_pca, labels = mean_pca_data$file, groups = mean_pca_data$file) + theme(legend.position = 'none')
pca_mean_plot
ggcorrplot(cor(mean_pca_data[,-1]))
ind_data <- ind_data %>% mutate(Temperature = sapply(strsplit(ind_data$file, "_"), function(x) x[3] ),
Genotype = sapply(strsplit(ind_data$file, "_"), function(x) x[4]))
mean_data <- ind_data %>% group_by(file, Temperature, Genotype) %>% select(-id) %>% summarise_all(.funs = median)
ind_data$Temperature <- as.numeric(ind_data$Temperature)
mean_data$Temperature <- as.numeric(mean_data$Temperature)
ind_data$Genotype <- as.factor(ind_data$Genotype)
ind_data <- ind_data %>% filter(Temperature < 37)
mean_data <- mean_data %>% filter(Temperature < 37)
ggplot(data = ind_data, aes(x = Temperature, y = mean_major, color = Genotype, group = Genotype)) + geom_point() +
geom_smooth(method = 'gam', formula = y ~ s(x, bs = 'tp', k = 5), se = FALSE)
ggplot(data = mean_data, aes(x = Temperature, y = mean_major)) + geom_point() + geom_smooth(method = 'lm', formula = y ~ poly(x, 4, raw = T))
gam_major <- gam(log(mean_major) ~ s(Temperature, bs = 'tp', k = 5, by = Genotype) + Genotype, data = ind_data,
method = 'REML')
summary(gam_major)
gam_plot_major <- draw(gam_major, residuals = TRUE)
gam_plot_major
library(ggplot2); library(dplyr); library(cowplot); library(ggcorrplot); library(ggbiplot); library(mgcv); library(gratia)
library(ggplot2); library(dplyr); library(cowplot); library(ggcorrplot); library(ggbiplot); library(brms); library(cmdstanr); library(loo); library(rstan)
setwd("~/GitHub/FR_n-prey-at-a-time/ms/PlasticityandGrowth_Paramecium")
options(mc.cores = 4)
options(mc.cores = 4)
ind_data <- read.csv('Plast_StartPop_Data.csv')
pca_data <- ind_data %>% select(-c(X, mean_grey, sd_grey, sd_area,
sd_perimeter, sd_major, sd_ar,
sd_ar, duration, N_frames, id))
pca_mvt <- prcomp(pca_data[,-1], center = TRUE, scale = TRUE)
pca_ind_plot <- ggbiplot(pca_mvt, groups = pca_data$file, ellipse = TRUE) + theme(legend.position = 'none')
pca_ind_plot
mean_pca_data <- pca_data %>% group_by(file) %>% summarize_all(.funs = mean)
mean_pca <- prcomp(mean_pca_data[,-1], center = TRUE, scale = TRUE)
pca_mean_plot <- ggbiplot(mean_pca, labels = mean_pca_data$file, groups = mean_pca_data$file) + theme(legend.position = 'none')
pca_mean_plot
ggcorrplot(cor(mean_pca_data[,-1]))
pca_data <- ind_data %>% select(c(file, mean_major, mean_minor, mean_ar, mean_turning, gross_speed,
net_disp, sd_gross_speed))
pca_mvt <- prcomp(pca_data[,-1], center = TRUE, scale = TRUE)
pca_ind_plot <- ggbiplot(pca_mvt, groups = pca_data$file, ellipse = TRUE) + theme(legend.position = 'none')
pca_ind_plot
mean_pca_data <- pca_data %>% group_by(file) %>% summarize_all(.funs = mean)
mean_pca <- prcomp(mean_pca_data[,-1], center = TRUE, scale = TRUE)
pca_mean_plot <- ggbiplot(mean_pca, labels = mean_pca_data$file, groups = mean_pca_data$file) + theme(legend.position = 'none')
pca_mean_plot
ggcorrplot(cor(mean_pca_data[,-1]))
ggplot(data = mean_pca_data, aes(x = mean_ar, y = gross_speed)) + geom_point() + geom_smooth(method = 'lm')
ggplot(data = mean_pca_data, aes(x = mean_major, y = mean_ar)) + geom_point() + geom_smooth(method = 'lm')
ggplot(data = mean_pca_data, aes(x = mean_major, y = gross_speed)) + geom_point() + geom_smooth(method = 'lm')
ggplot(data = mean_pca_data, aes(x = mean_turning, y = gross_speed)) + geom_point() + geom_smooth(method = 'lm')
ind_data <- ind_data %>% mutate(Temperature = sapply(strsplit(ind_data$file, "_"), function(x) x[3] ),
Genotype = sapply(strsplit(ind_data$file, "_"), function(x) x[4]))
mean_data <- ind_data %>% group_by(file, Temperature, Genotype) %>% select(-id) %>% summarise_all(.funs = median)
ind_data$Temperature <- as.numeric(ind_data$Temperature)
mean_data$Temperature <- as.numeric(mean_data$Temperature)
ind_data$Genotype <- as.factor(ind_data$Genotype)
mean_data$Genotype <- as.factor(mean_data$Genotype)
ind_data <- ind_data %>% filter(Temperature < 37)
mean_data <- mean_data %>% filter(Temperature < 37)
ggplot(data = ind_data, aes(x = Temperature, y = mean_major, color = Genotype)) +
geom_point() + geom_smooth(method = 'gam', formula = y ~ s(x, bs = 'tp', k  = 6), se = FALSE)
ggplot(data = mean_data, aes(x = Temperature, y = mean_major, color = Genotype)) + geom_point() +
geom_smooth()
mod_1_mean_major <- brm(formula = mean_major ~ Temperature + (1|Genotype), data = ind_data,
backend = 'cmdstanr')
summary(mod_1_mean_major)
mod_5_mean_major <- brm(formula = mean_major ~ poly(Temperature, 2, raw = TRUE) + (1 + poly(Temperature, 2, raw = TRUE)|Genotype), data = ind_data,
backend = 'cmdstanr')
summary(mod_5_mean_major)
range(ind_data$Temperature)
seq(10, 34, by = 0.2)
Genotype <- rep(unique(ind_data$Genotype), each = 121)
Temperature <- rep(seq(10, 34, by = 0.2), times = 20)
new_data <- data.frame(Genotype, Temperature)
predict_mean_major <- posterior_epred(mod_5_mean_major,
newdata = new_data)
predict_mean_major <- apply(predict_mean_major, 2, median)
predict_mean_major <- data.frame(Genotype, Temperature, Prediction = predict_mean_major)
predict_mean_major
predict_major_check <- predict_mean_major %>% group_by(Genotype) %>%
mutate(minimum = min(Prediction), maximum = max(Prediction))
View(predict_mean_major)
predict_major_check <- predict_mean_major %>% group_by(Genotype) %>%
summarise(minimum = min(Prediction), maximum = max(Prediction))
View(predict_major_check)
predict_major_check <- predict_major_check %>%
mutate(diff = maximum - minimum)
ranef(mod_5_mean_major)
ranef(mod_5_mean_major)[,1,2]
ranef(mod_5_mean_major)$Genotype[,1,2]
plot(x = ranef(mod_5_mean_major)$Genotype[,1,2], y = predict_major_check$diff)
plot(x = ranef(mod_5_mean_major)$Genotype[,1,2], y = ranef(mod_5_mean_major)$Genotype[,1,3])
plot(x = ranef(mod_5_mean_major)$Genotype[,1,3], y = predict_major_check$diff)
summary(lm(predict_major_check$diff ~ ranef(mod_5_mean_major)$Genotype[,1,3]))
summary(lm(predict_major_check$diff ~ ranef(mod_5_mean_major)$Genotype[,1,2]))
plot(x = ranef(mod_5_mean_major)$Genotype[,1,3], y = predict_major_check$diff)
plot(x = ranef(mod_5_mean_major)$Genotype[,1,2], y = predict_major_check$diff)
summary(lm(log(predict_major_check$diff) ~ ranef(mod_5_mean_major)$Genotype[,1,2]))
plot(x = ranef(mod_5_mean_major)$Genotype[,1,2], y = log(predict_major_check$diff))
?lines
?abline
abline(a = 3.45, b = -0.108)
plot(x = ranef(mod_5_mean_major)$Genotype[,1,2], y = predict_major_check$diff)
