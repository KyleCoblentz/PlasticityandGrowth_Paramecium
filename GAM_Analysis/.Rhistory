prob = fr_w(a = 0.25, h = 0.25, R0 = prey_dens[i], t = 6)/prey_dens[i])
}
prey_eaten_short
data <- as.data.frame(cbind(prey_dens, prey_eaten_long, prey_eaten_short))
fit_long <- frair_fit(formula = prey_eaten_long~prey_dens, data = data,
response = 'rogersII', start = list(a = 0.1, h = 1), fixed = list(T = 24))
fit_long
fit_short
prey_eaten_long <- vector(length = length(prey_dens))
for(i in 1:length(prey_dens)) {
prey_eaten_long[i] <- rbinom(1, size = prey_dens[i],
prob = fr_w(a = 0.25, h = 0.25, R0 = prey_dens[i], t = 24)/prey_dens[i])
}
prey_eaten_long
prey_eaten_short <- vector(length = length(prey_dens))
for(i in 1:length(prey_dens)) {
prey_eaten_short[i] <- rbinom(1, size = prey_dens[i],
prob = fr_w(a = 0.25, h = 0.25, R0 = prey_dens[i], t = 6)/prey_dens[i])
}
prey_eaten_short
data <- as.data.frame(cbind(prey_dens, prey_eaten_long, prey_eaten_short))
fit_long <- frair_fit(formula = prey_eaten_long~prey_dens, data = data,
response = 'rogersII', start = list(a = 0.1, h = 1), fixed = list(T = 24))
fit_short <- frair_fit(formula = prey_eaten_short~prey_dens, data = data,
response = 'rogersII', start = list(a = 0.1, h = 1), fixed = list(T = 6))
fit_long
fit_short
prey_eaten_long <- vector(length = length(prey_dens))
for(i in 1:length(prey_dens)) {
prey_eaten_long[i] <- rbinom(1, size = prey_dens[i],
prob = fr_w(a = 0.25, h = 0.25, R0 = prey_dens[i], t = 24)/prey_dens[i])
}
prey_eaten_long
prey_eaten_short <- vector(length = length(prey_dens))
for(i in 1:length(prey_dens)) {
prey_eaten_short[i] <- rbinom(1, size = prey_dens[i],
prob = fr_w(a = 0.25, h = 0.25, R0 = prey_dens[i], t = 6)/prey_dens[i])
}
prey_eaten_short
data <- as.data.frame(cbind(prey_dens, prey_eaten_long, prey_eaten_short))
fit_long <- frair_fit(formula = prey_eaten_long~prey_dens, data = data,
response = 'rogersII', start = list(a = 0.1, h = 1), fixed = list(T = 24))
fit_long
fit_short
prey_eaten_short <- vector(length = length(prey_dens))
for(i in 1:length(prey_dens)) {
prey_eaten_short[i] <- rbinom(1, size = prey_dens[i],
prob = fr_w(a = 0.25, h = 0.25, R0 = prey_dens[i], t = 8)/prey_dens[i])
}
prey_eaten_short
data <- as.data.frame(cbind(prey_dens, prey_eaten_long, prey_eaten_short))
fit_long <- frair_fit(formula = prey_eaten_long~prey_dens, data = data,
response = 'rogersII', start = list(a = 0.1, h = 1), fixed = list(T = 24))
fit_short <- frair_fit(formula = prey_eaten_short~prey_dens, data = data,
response = 'rogersII', start = list(a = 0.1, h = 1), fixed = list(T = 8))
fit_long
fit_short
4500*4
5500*4
library(ggplot2); library(dplyr); library(cowplot)
dyn_data <- read.csv('CopepodParameciumEvolDynamics_Examples.csv')
setwd("~/")
dyn_data <- read.csv('CopepodParameciumEvolDynamics_Examples.csv')
dyn_data <- read.csv('CopepodParameciumEvolDynamics_Examples.csv')
dyn_data <- dyn_data %>% mutate(Density = ifelse(Volume == 'WD', Number/40,
ifelse(Volume == 'HD', Number/20, Number*5)))
dyndata <- dyn_data %>% mutate(Temperature = substr(Microcosm_ID, start = 1, stop = 2))
dyn_data <- dyn_data %>% mutate(Temperature = substr(Microcosm_ID, start = 1, stop = 2))
)
)
library(ggplot2); library(dplyr); library(cowplot)
dyn_data <- read.csv('CopepodParameciumEvolDynamics_Examples.csv')
dyn_data <- dyn_data %>% mutate(Density = ifelse(Volume == 'WD', Number/40,
ifelse(Volume == 'HD', Number/20, Number*5)))
dyn_data <- dyn_data %>% mutate(Temperature = substr(Microcosm_ID, start = 1, stop = 2))
ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature, shape = Organism)) + geom_point()
ggplot(data = dyn_data, aes(x = Day, y = Density)) + geom_point() +
geom_line() + facet_grid(rows = Organism, cols = Temperature)
?facet_grid
ggplot(data = dyn_data, aes(x = Day, y = Density)) + geom_point() +
geom_line() + facet_grid(rows = "Organism", cols = "Temperature")
ggplot(data = dyn_data, aes(x = Day, y = Density)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature))
ggplot(data = dyn_data, aes(x = Day, y = Density)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y')
ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y')
?scale_color_discrete
ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y') +
scale_color_discrete(type = list('20' = '#4381C1', 26 = '#FAA916'))
ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y') +
scale_color_discrete(type = list('20' = '#4381C1', '26' = '#FAA916'))
ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y') +
scale_color_manual(values = list('20' = '#4381C1', '26' = '#FAA916'))
ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y') +
scale_color_manual(limits = list('20' = '#4381C1', '26' = '#FAA916'))
ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y') +
scale_color_manual(values = c('20' = '#4381C1', '26' = '#FAA916'))
ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y') +
scale_color_manual(values = c('20' = '#4381C1', '26' = '#FAA916')) +
theme_cowplot()
ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y') +
scale_color_manual(values = c('20' = '#4381C1', '26' = '#FAA916')) +
theme_minimal()
ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y') +
scale_color_manual(values = c('20' = '#4381C1', '26' = '#FAA916')) +
theme_classic()
ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y') +
scale_color_manual(values = c('20' = '#4381C1', '26' = '#FAA916')) +
theme_bw()
copepod_plot <- ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y') +
scale_color_manual(values = c('20' = '#4381C1', '26' = '#FAA916')) +
theme_bw()
save_plot(filename = 'copepod_dynplot.png', plot = copepod_plot, ncol = 2)
save_plot(filename = 'copepod_dynplot.png', plot = copepod_plot, ncol = 1.75)
copepod_plot <- ggplot(data = dyn_data, aes(x = Day, y = Density, color = Temperature)) + geom_point() +
geom_line() + facet_grid(rows = vars(Organism), cols = vars(Temperature), scales = 'free_y') +
scale_color_manual(values = c('20' = '#4381C1', '26' = '#FAA916')) +
theme_bw() + ylab('Density (per mL)')
save_plot(filename = 'copepod_dynplot.png', plot = copepod_plot, ncol = 1.75)
save_plot(filename = 'copepod_dynplot.png', plot = copepod_plot)
save_plot(filename = 'copepod_dynplot.png', plot = copepod_plot)
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/kylec/Documents/GitHub/FR_n-prey-at-a-time/ms/PlasticityandGrowth_Paramecium/GAM_Analysis/')
library(dplyr); library(ggplot2); library(cowplot); library(mgcv); library(gratia)
gam_width_noint <- gam(formula = mean_minor ~ Line + s(Temperature, k = 5, bs = 'tp'), data = morph_data, method = 'REML')
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/kylec/Documents/GitHub/FR_n-prey-at-a-time/ms/PlasticityandGrowth_Paramecium/GAM_Analysis/')
library(dplyr); library(ggplot2); library(cowplot); library(mgcv); library(gratia)
morph_data <- read.csv('Plast_StartPop_Data.csv')
morph_data <- morph_data %>% mutate(Line = as.factor(sapply(strsplit(morph_data$file, split = "_"),'[[', 4)),
Temperature = as.numeric(sapply(strsplit(morph_data$file, split = "_"),'[[', 3)),
LineTemp = paste(Line, Temperature, sep = "_"))
morph_data <- filter(morph_data, Temperature < 37)
ggplot(data = morph_data, aes(x = Temperature, y = mean_major)) + geom_point() + geom_smooth(method = 'gam', formula = y ~ s(x, k = 5, bs = 'tp'), se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5)
gam_length <- gam(formula = mean_major ~ Line + s(Temperature, by = Line, k = 5, bs = 'tp'), data = morph_data, method = 'REML')
summary(gam_length)
for (i in 1:length(smooths(gam_length))) {
out <- draw(gam_length, select = i, residuals = TRUE)
print(out) }
gam_length_noint <- gam(formula = mean_major ~ Line + s(Temperature, k = 5, bs = 'tp'), data = morph_data, method = 'REML')
AIC(gam_length, gam_length_noint)
AIC(gam_length_noint) - AIC(gam_length)
AIC(gam_length_noint) - AIC(gam_length)
ggplot(data = morph_data, aes(x = Temperature, y = mean_minor)) + geom_point() + geom_smooth(method = 'gam', formula = y ~ s(x, k = 5, bs = 'tp'), se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5)
gam_width <- gam(formula = mean_minor ~ Line + s(Temperature, by = Line, k = 5, bs = 'tp'), data = morph_data, method = 'REML')
summary(gam_width)
for (i in 1:length(smooths(gam_width))) {
out <- draw(gam_width, select = i, residuals = TRUE)
print(out) }
gam_width_noint <- gam(formula = mean_minor ~ Line + s(Temperature, k = 5, bs = 'tp'), data = morph_data, method = 'REML')
AIC(gam_width, gam_width_noint)
AIC(gam_width_noint) - AIC(gam_width)
ggplot(data = morph_data, aes(x = Temperature, y = mean_ar)) + geom_point() + geom_smooth(method = 'gam', formula = y ~ s(x, k = 5, bs = 'tp'), se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5)
gam_ar <- gam(formula = mean_ar ~ Line + s(Temperature, by = Line, k = 5, bs = 'tp'), data = morph_data, method = 'REML')
gam_ar <- gam(formula = mean_ar ~ Line + s(Temperature, by = Line, k = 5, bs = 'tp'), data = morph_data, method = 'REML')
summary(gam_ar)
for (i in 1:length(smooths(gam_ar))) {
out <- draw(gam_ar, select = i, residuals = TRUE)
print(out) }
gam_ar_noint <- gam(formula = mean_ar ~ Line + s(Temperature, k = 5, bs = 'tp'), data = morph_data, method = 'REML')
AIC(gam_ar, gam_ar_noint)
ggplot(data = morph_data, aes(x = Temperature, y = gross_speed)) + geom_point() + geom_smooth(method = 'gam', formula = y ~ s(x, k = 5, bs = 'tp'), se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5)
gam_speed <- gam(formula = gross_speed ~ Line + s(Temperature, by = Line, k = 5, bs = 'tp'), data = morph_data, method = 'REML')
summary(gam_speed)
for (i in 1:length(smooths(gam_speed))) {
out <- draw(gam_speed, select = i, residuals = TRUE)
print(out) }
gam_speed_noint <- gam(formula = gross_speed ~ Line + s(Temperature, k = 5, bs = 'tp'), data = morph_data, method = 'REML')
AIC(gam_speed, gam_speed_noint)
AIC(gam_speed_noint) - AIC(gam_speed)
ggplot(data = morph_data, aes(x = mean_major, y = mean_minor, color = Temperature)) + geom_point() + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5)
ggplot(data = morph_data, aes(x = mean_major, y = mean_minor, color = Temperature, group = Line)) + geom_point() + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5)
ggplot(data = morph_data, aes(x = mean_major, y = mean_minor, group = Line)) + geom_point(color = Temperature) + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5)
ggplot(data = morph_data, aes(x = mean_major, y = mean_minor)) + geom_point(color = Temperature) + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5)
ggplot(data = morph_data, aes(x = mean_major, y = mean_minor)) + geom_point(color = 'Temperature') + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5)
ggplot(data = morph_data, aes(x = mean_major, y = mean_minor)) + geom_point(aes(color = Temperature)) + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5)
ggplot(data = morph_data, aes(x = mean_major, y = mean_minor)) + geom_point(aes(color = Temperature)) + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5) +
scale_color_viridis_b()
ggplot(data = morph_data, aes(x = mean_major, y = mean_ar)) + geom_point(aes(color = Temperature)) + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5) +
scale_color_viridis_b()
ggplot(data = morph_data, aes(x = mean_major, y = gross_speed)) + geom_point(aes(color = Temperature)) + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5) +
scale_color_viridis_b()
ggplot(data = morph_data, aes(x = mean_minor, y = mean_ar)) + geom_point(aes(color = Temperature)) + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5) +
scale_color_viridis_b()
ggplot(data = morph_data, aes(x = mean_minor, y = gross_speed)) + geom_point(aes(color = Temperature)) + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5) +
scale_color_viridis_b()
ggplot(data = morph_data, aes(x = mean_ar, y = gross_speed)) + geom_point(aes(color = Temperature)) + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5) +
scale_color_viridis_b()
ggplot(data = morph_data, aes(x = mean_ar, y = gross_speed)) + geom_point(aes(color = Temperature)) + geom_smooth(method = 'lm', se = FALSE) +
facet_wrap(facets = "Line", nrow = 4, ncol = 5) +
scale_color_viridis_b()
setwd('C:/Users/kylec/Documents/GitHub/FR_n-prey-at-a-time/ms/PlasticityandGrowth_Paramecium/GAM_Analysis/')
library(dplyr); library(ggplot2); library(cowplot); library(mgcv); library(gratia)
setwd("~/GitHub/FR_n-prey-at-a-time/ms/PlasticityandGrowth_Paramecium/GAM_Analysis")
### load libraries
library(dplyr); library(ggplot2); library(cowplot); library(mgcv); library(gratia); library(ggbiplot)
### set working directory
setwd("~/GitHub/FR_n-prey-at-a-time/ms/PlasticityandGrowth_Paramecium/GAM_Analysis")
tpc_data <- read.csv('StartPop_TPC.csv')
tpc_data <- tpc_data %>% filter(!is.na(Growth.Rate.Hours) & !is.infinite(Growth.Rate.Hours))
library(dplyr); library(ggplot2); library(cowplot); library(mgcv); library(gratia); library(ggbiplot)
tpc_data <- tpc_data %>% filter(Genotype != 'blank')
tpc_data$Genotype <- as.factor(paste0('G', tpc_data$Genotype))
colnames(tpc_data)[which(colnames(tpc_data) == 'Genotype')] <- 'Line'
tpc_data$Date.paramecium.introduced <- as.factor(tpc_data$Date.paramecium.introduced)
tpc_gam <- gam(formula = Growth.Rate.Hours ~ Line + s(Temperature, k = 6, bs = 'tp', by = Line) + s(Date.paramecium.introduced, bs = 're'), data = tpc_data,
method = 'REML')
summary(tpc_gam)
for (i in 1:length(smooths(gam_speed))) {
out <- draw(tpc_gam, select = i, residuals = TRUE)
print(out) }
for (i in 1:length(smooths(tpc_gam))) {
out <- draw(tpc_gam, select = i, residuals = TRUE)
print(out) }
tpc_summary <- function(gam_fit, factor, temp_low, temp_high, breadth_proportion){
out_data <- matrix(nrow = 20, ncol = 8) # columns are Line, max_growth, t_opt, t_min, t_max, thermal_range_min, thermal_range_max, thermal_range
for(i in 1:length(unique(factor))){
line_prediction_data <- data.frame(Line = rep(unique(factor)[i], times = length(seq(temp_low, temp_high, by = 0.1))),
Date.paramecium.introduced = rep('2024-02-16', times = length(seq(temp_low, temp_high, by = 0.1))),
Temperature = seq(temp_low, temp_high, by = 0.1))
gam_prediction <- predict.gam(gam_fit, newdata = line_prediction_data, exclude = "s(Date.paramecium.introduced)")
prediction_together <- cbind(line_prediction_data, gam_prediction)
max_growth <- max(prediction_together$gam_prediction)
t_opt <- prediction_together$Temperature[which(prediction_together$gam_prediction == max_growth)]
below_opt <- prediction_together[which(prediction_together$Temperature < t_opt),]
t_min <- below_opt$Temperature[which(abs(below_opt$gam_prediction) == min(abs(below_opt$gam_prediction)))]
above_opt <- prediction_together[which(prediction_together$Temperature > t_opt),]
t_max <- above_opt$Temperature[which(abs(above_opt$gam_prediction) == min(abs(above_opt$gam_prediction)))]
in_range <- filter(prediction_together, gam_prediction >= breadth_proportion*max_growth)
thermal_range_min <- in_range$Temperature[1]
thermal_range_max <- in_range$Temperature[nrow(in_range)]
thermal_range <- thermal_range_max - thermal_range_min
out_data[i,1] <- as.character(unique(factor)[i])
out_data[i,2] <- max_growth
out_data[i,3] <- t_opt
out_data[i,4] <- t_min
out_data[i,5] <- t_max
out_data[i,6] <- thermal_range_min
out_data[i,7] <- thermal_range_max
out_data[i,8] <- thermal_range
print(i)
}
out_data <- as.data.frame(out_data)
colnames(out_data) <- c("Line", 'max_growth', 't_opt', 't_min',
't_max', 'thermal_range_min', 'thermal_range_max', 'thermal_range')
return(out_data)
}
tpc_summary_data <- tpc_summary(gam_fit = tpc_gam, factor = tpc_data$Line, temp_low = 0, temp_high = 45, breadth_proportion = 0.5)
ggplot(data = tpc_summary_data, aes(x = max_growth)) + geom_histogram()
tpc_summary <- function(gam_fit, factor, temp_low, temp_high, breadth_proportion){
out_data <- matrix(nrow = 20, ncol = 8) # columns are Line, max_growth, t_opt, t_min, t_max, thermal_range_min, thermal_range_max, thermal_range
for(i in 1:length(unique(factor))){
line_prediction_data <- data.frame(Line = rep(unique(factor)[i], times = length(seq(temp_low, temp_high, by = 0.1))),
Date.paramecium.introduced = rep('2024-02-16', times = length(seq(temp_low, temp_high, by = 0.1))),
Temperature = seq(temp_low, temp_high, by = 0.1))
gam_prediction <- predict.gam(gam_fit, newdata = line_prediction_data, exclude = "s(Date.paramecium.introduced)")
prediction_together <- cbind(line_prediction_data, gam_prediction)
max_growth <- max(prediction_together$gam_prediction)
t_opt <- prediction_together$Temperature[which(prediction_together$gam_prediction == max_growth)]
below_opt <- prediction_together[which(prediction_together$Temperature < t_opt),]
t_min <- below_opt$Temperature[which(abs(below_opt$gam_prediction) == min(abs(below_opt$gam_prediction)))]
above_opt <- prediction_together[which(prediction_together$Temperature > t_opt),]
t_max <- above_opt$Temperature[which(abs(above_opt$gam_prediction) == min(abs(above_opt$gam_prediction)))]
in_range <- filter(prediction_together, gam_prediction >= breadth_proportion*max_growth)
thermal_range_min <- in_range$Temperature[1]
thermal_range_max <- in_range$Temperature[nrow(in_range)]
thermal_range <- thermal_range_max - thermal_range_min
out_data[i,1] <- as.character(unique(factor)[i])
out_data[i,2] <- as.numeric(max_growth)
out_data[i,3] <- as.numeric(t_opt)
out_data[i,4] <- as.numeric(t_min)
out_data[i,5] <- as.numeric(t_max)
out_data[i,6] <- as.numeric(thermal_range_min)
out_data[i,7] <- as.numeric(thermal_range_max)
out_data[i,8] <- as.numeric(thermal_range)
print(i)
}
out_data <- as.data.frame(out_data)
colnames(out_data) <- c("Line", 'max_growth', 't_opt', 't_min',
't_max', 'thermal_range_min', 'thermal_range_max', 'thermal_range')
return(out_data)
}
tpc_summary_data <- tpc_summary(gam_fit = tpc_gam, factor = tpc_data$Line, temp_low = 0, temp_high = 45, breadth_proportion = 0.5)
View(tpc_summary_data)
tpc_summary <- function(gam_fit, factor, temp_low, temp_high, breadth_proportion){
out_data <- matrix(nrow = 20, ncol = 8) # columns are Line, max_growth, t_opt, t_min, t_max, thermal_range_min, thermal_range_max, thermal_range
for(i in 1:length(unique(factor))){
line_prediction_data <- data.frame(Line = rep(unique(factor)[i], times = length(seq(temp_low, temp_high, by = 0.1))),
Date.paramecium.introduced = rep('2024-02-16', times = length(seq(temp_low, temp_high, by = 0.1))),
Temperature = seq(temp_low, temp_high, by = 0.1))
gam_prediction <- predict.gam(gam_fit, newdata = line_prediction_data, exclude = "s(Date.paramecium.introduced)")
prediction_together <- cbind(line_prediction_data, gam_prediction)
max_growth <- max(prediction_together$gam_prediction)
t_opt <- prediction_together$Temperature[which(prediction_together$gam_prediction == max_growth)]
below_opt <- prediction_together[which(prediction_together$Temperature < t_opt),]
t_min <- below_opt$Temperature[which(abs(below_opt$gam_prediction) == min(abs(below_opt$gam_prediction)))]
above_opt <- prediction_together[which(prediction_together$Temperature > t_opt),]
t_max <- above_opt$Temperature[which(abs(above_opt$gam_prediction) == min(abs(above_opt$gam_prediction)))]
in_range <- filter(prediction_together, gam_prediction >= breadth_proportion*max_growth)
thermal_range_min <- in_range$Temperature[1]
thermal_range_max <- in_range$Temperature[nrow(in_range)]
thermal_range <- thermal_range_max - thermal_range_min
out_data[i,1] <- as.character(unique(factor)[i])
out_data[i,2] <- as.numeric(paste(max_growth))
out_data[i,3] <- as.numeric(paste(t_opt))
out_data[i,4] <- as.numeric(paste(t_min))
out_data[i,5] <- as.numeric(paste(t_max))
out_data[i,6] <- as.numeric(paste(thermal_range_min))
out_data[i,7] <- as.numeric(paste(thermal_range_max))
out_data[i,8] <- as.numeric(paste(thermal_range))
print(i)
}
out_data <- as.data.frame(out_data)
colnames(out_data) <- c("Line", 'max_growth', 't_opt', 't_min',
't_max', 'thermal_range_min', 'thermal_range_max', 'thermal_range')
return(out_data)
}
tpc_summary_data <- tpc_summary(gam_fit = tpc_gam, factor = tpc_data$Line, temp_low = 0, temp_high = 45, breadth_proportion = 0.5)
?as.data.frame
tpc_summary <- function(gam_fit, factor, temp_low, temp_high, breadth_proportion){
out_data <- matrix(nrow = 20, ncol = 8) # columns are Line, max_growth, t_opt, t_min, t_max, thermal_range_min, thermal_range_max, thermal_range
for(i in 1:length(unique(factor))){
line_prediction_data <- data.frame(Line = rep(unique(factor)[i], times = length(seq(temp_low, temp_high, by = 0.1))),
Date.paramecium.introduced = rep('2024-02-16', times = length(seq(temp_low, temp_high, by = 0.1))),
Temperature = seq(temp_low, temp_high, by = 0.1))
gam_prediction <- predict.gam(gam_fit, newdata = line_prediction_data, exclude = "s(Date.paramecium.introduced)")
prediction_together <- cbind(line_prediction_data, gam_prediction)
max_growth <- max(prediction_together$gam_prediction)
t_opt <- prediction_together$Temperature[which(prediction_together$gam_prediction == max_growth)]
below_opt <- prediction_together[which(prediction_together$Temperature < t_opt),]
t_min <- below_opt$Temperature[which(abs(below_opt$gam_prediction) == min(abs(below_opt$gam_prediction)))]
above_opt <- prediction_together[which(prediction_together$Temperature > t_opt),]
t_max <- above_opt$Temperature[which(abs(above_opt$gam_prediction) == min(abs(above_opt$gam_prediction)))]
in_range <- filter(prediction_together, gam_prediction >= breadth_proportion*max_growth)
thermal_range_min <- in_range$Temperature[1]
thermal_range_max <- in_range$Temperature[nrow(in_range)]
thermal_range <- thermal_range_max - thermal_range_min
out_data[i,1] <- as.character(unique(factor)[i])
out_data[i,2] <- max_growth
out_data[i,3] <- t_opt
out_data[i,4] <- t_min
out_data[i,5] <- t_max
out_data[i,6] <- thermal_range_min
out_data[i,7] <- thermal_range_max
out_data[i,8] <- thermal_range
print(i)
}
out_data <- as.data.frame(out_data)
colnames(out_data) <- c("Line", 'max_growth', 't_opt', 't_min',
't_max', 'thermal_range_min', 'thermal_range_max', 'thermal_range')
out_data[,2:8] <- as.numeric(out_data[,2:8])
return(out_data)
}
tpc_summary_data <- tpc_summary(gam_fit = tpc_gam, factor = tpc_data$Line, temp_low = 0, temp_high = 45, breadth_proportion = 0.5)
tpc_summary <- function(gam_fit, factor, temp_low, temp_high, breadth_proportion){
out_data <- matrix(nrow = 20, ncol = 8) # columns are Line, max_growth, t_opt, t_min, t_max, thermal_range_min, thermal_range_max, thermal_range
for(i in 1:length(unique(factor))){
line_prediction_data <- data.frame(Line = rep(unique(factor)[i], times = length(seq(temp_low, temp_high, by = 0.1))),
Date.paramecium.introduced = rep('2024-02-16', times = length(seq(temp_low, temp_high, by = 0.1))),
Temperature = seq(temp_low, temp_high, by = 0.1))
gam_prediction <- predict.gam(gam_fit, newdata = line_prediction_data, exclude = "s(Date.paramecium.introduced)")
prediction_together <- cbind(line_prediction_data, gam_prediction)
max_growth <- max(prediction_together$gam_prediction)
t_opt <- prediction_together$Temperature[which(prediction_together$gam_prediction == max_growth)]
below_opt <- prediction_together[which(prediction_together$Temperature < t_opt),]
t_min <- below_opt$Temperature[which(abs(below_opt$gam_prediction) == min(abs(below_opt$gam_prediction)))]
above_opt <- prediction_together[which(prediction_together$Temperature > t_opt),]
t_max <- above_opt$Temperature[which(abs(above_opt$gam_prediction) == min(abs(above_opt$gam_prediction)))]
in_range <- filter(prediction_together, gam_prediction >= breadth_proportion*max_growth)
thermal_range_min <- in_range$Temperature[1]
thermal_range_max <- in_range$Temperature[nrow(in_range)]
thermal_range <- thermal_range_max - thermal_range_min
out_data[i,1] <- as.character(unique(factor)[i])
out_data[i,2] <- max_growth
out_data[i,3] <- t_opt
out_data[i,4] <- t_min
out_data[i,5] <- t_max
out_data[i,6] <- thermal_range_min
out_data[i,7] <- thermal_range_max
out_data[i,8] <- thermal_range
print(i)
}
out_data <- as.data.frame(out_data)
colnames(out_data) <- c("Line", 'max_growth', 't_opt', 't_min',
't_max', 'thermal_range_min', 'thermal_range_max', 'thermal_range')
for(i in 1:8){
out_data[,i] <- as.numeric(paste(out_data[,i]))
}
return(out_data)
}
tpc_summary_data <- tpc_summary(gam_fit = tpc_gam, factor = tpc_data$Line, temp_low = 0, temp_high = 45, breadth_proportion = 0.5)
tpc_summary <- function(gam_fit, factor, temp_low, temp_high, breadth_proportion){
out_data <- matrix(nrow = 20, ncol = 8) # columns are Line, max_growth, t_opt, t_min, t_max, thermal_range_min, thermal_range_max, thermal_range
for(i in 1:length(unique(factor))){
line_prediction_data <- data.frame(Line = rep(unique(factor)[i], times = length(seq(temp_low, temp_high, by = 0.1))),
Date.paramecium.introduced = rep('2024-02-16', times = length(seq(temp_low, temp_high, by = 0.1))),
Temperature = seq(temp_low, temp_high, by = 0.1))
gam_prediction <- predict.gam(gam_fit, newdata = line_prediction_data, exclude = "s(Date.paramecium.introduced)")
prediction_together <- cbind(line_prediction_data, gam_prediction)
max_growth <- max(prediction_together$gam_prediction)
t_opt <- prediction_together$Temperature[which(prediction_together$gam_prediction == max_growth)]
below_opt <- prediction_together[which(prediction_together$Temperature < t_opt),]
t_min <- below_opt$Temperature[which(abs(below_opt$gam_prediction) == min(abs(below_opt$gam_prediction)))]
above_opt <- prediction_together[which(prediction_together$Temperature > t_opt),]
t_max <- above_opt$Temperature[which(abs(above_opt$gam_prediction) == min(abs(above_opt$gam_prediction)))]
in_range <- filter(prediction_together, gam_prediction >= breadth_proportion*max_growth)
thermal_range_min <- in_range$Temperature[1]
thermal_range_max <- in_range$Temperature[nrow(in_range)]
thermal_range <- thermal_range_max - thermal_range_min
out_data[i,1] <- as.character(unique(factor)[i])
out_data[i,2] <- max_growth
out_data[i,3] <- t_opt
out_data[i,4] <- t_min
out_data[i,5] <- t_max
out_data[i,6] <- thermal_range_min
out_data[i,7] <- thermal_range_max
out_data[i,8] <- thermal_range
print(i)
}
out_data <- as.data.frame(out_data)
colnames(out_data) <- c("Line", 'max_growth', 't_opt', 't_min',
't_max', 'thermal_range_min', 'thermal_range_max', 'thermal_range')
for(i in 2:8){
out_data[,i] <- as.numeric(paste(out_data[,i]))
}
return(out_data)
}
tpc_summary_data <- tpc_summary(gam_fit = tpc_gam, factor = tpc_data$Line, temp_low = 0, temp_high = 45, breadth_proportion = 0.5)
ggplot(data = tpc_summary_data, aes(x = max_growth)) + geom_histogram()
ggplot(data = tpc_summary_data, aes(x = t_opt)) + geom_histogram()
ggplot(data = tpc_summary_data, aes(x = t_min)) + geom_histogram()
ggplot(data = tpc_summary_data, aes(x = t_max)) + geom_histogram()
ggplot(data = tpc_summary_data, aes(x = thermal_range)) + geom_histogram()
ggplot(data = tpc_summary_data, aes(x = t_opt, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = t_min, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = t_max, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = t_opt, y = thermal_breadth)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = t_opt, y = thermal_range)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = thermal_range, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = filter(tpc_summary_data, Line != 'G20') , aes(x = t_opt, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = filter(tpc_summary_data, Line != 'G20') , aes(x = max_growth, y = thermal_range)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = thermal_range, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm')
library(dplyr); library(ggplot2); library(cowplot); library(mgcv); library(gratia); library(ggbiplot); library(lmodel2)
ggplot(data = tpc_summary_data, aes(x = thermal_range, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = filter(tpc_summary_data, Line != 'G20'), aes(x = t_opt, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = filter(tpc_summary_data, Line != 'G20'), aes(x = thermal_range, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = t_opt, y = t_min)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = t_min, y = t_opt)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = t_max, y = t_opt)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = thermal_range, y = t_opt)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = filter(tpc_summary_data, Line != 'G20'), aes(x = thermal_range, y = t_opt)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = t_max, y = t_min)) + geom_point() +
geom_smooth(method = 'lm')
ggplot(data = filter(tpc_summary_data, Line != 'G20'), aes(x = t_max, y = t_min)) + geom_point() +
geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = thermal_range, y = t_min)) + geom_point() +
geom_smooth(method = 'lm')
ggplot(data = tpc_summary_data, aes(x = thermal_range, y = t_max)) + geom_point() +
geom_smooth(method = 'lm')
ggplot(data = tpc_data, aes(x = Temperature, y = Growth.Rate.Hours, color = Line)) +
geom_point() + geom_smooth(method = 'gam', formula = y ~ s(x, k = 6, bs = 'tp'), se = FALSE)
ggplot(data = tpc_summary_data, aes(x = t_opt, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm') + ggtitle('Thermal Optimum and
Max Growth Rate')
ggplot(data = tpc_summary_data, aes(x = t_min, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm') + ggtitle('Critical Lower Temperature and Max Growth Rate')
ggplot(data = tpc_summary_data, aes(x = t_opt, y = max_growth)) +
geom_point() + geom_smooth(method = 'lm') + ggtitle('Thermal Optimum and Max Growth Rate')
